{"ast":null,"code":"export function generateRandomName() {\n  const firstNames = ['John', 'Emma', 'Michael', 'Sophia', 'William', 'Olivia', 'James', 'Ava', 'Daniel', 'Isabella'];\n  const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez'];\n  const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];\n  const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\n  return `${randomFirstName} ${randomLastName}`;\n}\nexport function generateRandomEmail(name) {\n  const domain = 'example.com';\n  const randomNumbers = Math.floor(Math.random() * 1000);\n  const username = name.replace(/\\s+/g, '').toLowerCase(); // Remove spaces and convert to lowercase\n\n  return `${username}${randomNumbers}@${domain}`;\n}\nexport function generateRandomDate() {\n  const startDate = new Date(1970, 0, 1); // Start date\n  const endDate = new Date(); // End date (current date)\n\n  const randomDate = new Date(startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime()));\n  return randomDate.toISOString(); // Convert to ISO format\n}\nexport function generateRandomCommentCount() {\n  return Math.floor(Math.random() * 101); // Random number between 0 and 100\n}\nexport function fetchUser(count) {\n  const users = [];\n  for (let i = 0; i < count; i++) {\n    const id = i + 1;\n    const name = generateRandomName();\n    const email = generateRandomEmail(name);\n    const joinedOn = generateRandomDate();\n    const commentCount = generateRandomCommentCount();\n    const user = {\n      id,\n      name,\n      email,\n      joinedOn,\n      commentCount\n    };\n    users.push(user);\n  }\n  return users;\n}","map":{"version":3,"names":["generateRandomName","firstNames","lastNames","randomFirstName","Math","floor","random","length","randomLastName","generateRandomEmail","name","domain","randomNumbers","username","replace","toLowerCase","generateRandomDate","startDate","Date","endDate","randomDate","getTime","toISOString","generateRandomCommentCount","fetchUser","count","users","i","id","email","joinedOn","commentCount","user","push"],"sources":["D:/Study/Semester 6/EAD/Usage of Web Workers in Modern Web Applications/my-react-app/src/services/fetchUser.js"],"sourcesContent":["export function generateRandomName() {\r\n    const firstNames = ['John', 'Emma', 'Michael', 'Sophia', 'William', 'Olivia', 'James', 'Ava', 'Daniel', 'Isabella'];\r\n    const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez'];\r\n\r\n    const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r\n    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r\n\r\n    return `${randomFirstName} ${randomLastName}`;\r\n}\r\n\r\nexport function generateRandomEmail(name) {\r\n    const domain = 'example.com';\r\n    const randomNumbers = Math.floor(Math.random() * 1000);\r\n    const username = name.replace(/\\s+/g, '').toLowerCase(); // Remove spaces and convert to lowercase\r\n\r\n    return `${username}${randomNumbers}@${domain}`;\r\n}\r\n\r\nexport function generateRandomDate() {\r\n    const startDate = new Date(1970, 0, 1); // Start date\r\n    const endDate = new Date(); // End date (current date)\r\n\r\n    const randomDate = new Date(startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime()));\r\n\r\n    return randomDate.toISOString(); // Convert to ISO format\r\n}\r\n\r\nexport function generateRandomCommentCount() {\r\n    return Math.floor(Math.random() * 101); // Random number between 0 and 100\r\n}\r\n\r\nexport function fetchUser(count) {\r\n    const users = [];\r\n\r\n    for (let i = 0; i < count; i++) {\r\n        const id = i + 1;\r\n        const name = generateRandomName();\r\n        const email = generateRandomEmail(name);\r\n        const joinedOn = generateRandomDate();\r\n        const commentCount = generateRandomCommentCount();\r\n\r\n        const user = {\r\n            id,\r\n            name,\r\n            email,\r\n            joinedOn,\r\n            commentCount\r\n        };\r\n\r\n        users.push(user);\r\n    }\r\n\r\n    return users;\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,kBAAkBA,CAAA,EAAG;EACjC,MAAMC,UAAU,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC;EACnH,MAAMC,SAAS,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,CAAC;EAE1H,MAAMC,eAAe,GAAGF,UAAU,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,UAAU,CAACM,MAAM,CAAC,CAAC;EACjF,MAAMC,cAAc,GAAGN,SAAS,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,SAAS,CAACK,MAAM,CAAC,CAAC;EAE9E,OAAQ,GAAEJ,eAAgB,IAAGK,cAAe,EAAC;AACjD;AAEA,OAAO,SAASC,mBAAmBA,CAACC,IAAI,EAAE;EACtC,MAAMC,MAAM,GAAG,aAAa;EAC5B,MAAMC,aAAa,GAAGR,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;EACtD,MAAMO,QAAQ,GAAGH,IAAI,CAACI,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEzD,OAAQ,GAAEF,QAAS,GAAED,aAAc,IAAGD,MAAO,EAAC;AAClD;AAEA,OAAO,SAASK,kBAAkBA,CAAA,EAAG;EACjC,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACxC,MAAMC,OAAO,GAAG,IAAID,IAAI,CAAC,CAAC,CAAC,CAAC;;EAE5B,MAAME,UAAU,GAAG,IAAIF,IAAI,CAACD,SAAS,CAACI,OAAO,CAAC,CAAC,GAAGjB,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIa,OAAO,CAACE,OAAO,CAAC,CAAC,GAAGJ,SAAS,CAACI,OAAO,CAAC,CAAC,CAAC,CAAC;EAE5G,OAAOD,UAAU,CAACE,WAAW,CAAC,CAAC,CAAC,CAAC;AACrC;AAEA,OAAO,SAASC,0BAA0BA,CAAA,EAAG;EACzC,OAAOnB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AAC5C;AAEA,OAAO,SAASkB,SAASA,CAACC,KAAK,EAAE;EAC7B,MAAMC,KAAK,GAAG,EAAE;EAEhB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,EAAEE,CAAC,EAAE,EAAE;IAC5B,MAAMC,EAAE,GAAGD,CAAC,GAAG,CAAC;IAChB,MAAMjB,IAAI,GAAGV,kBAAkB,CAAC,CAAC;IACjC,MAAM6B,KAAK,GAAGpB,mBAAmB,CAACC,IAAI,CAAC;IACvC,MAAMoB,QAAQ,GAAGd,kBAAkB,CAAC,CAAC;IACrC,MAAMe,YAAY,GAAGR,0BAA0B,CAAC,CAAC;IAEjD,MAAMS,IAAI,GAAG;MACTJ,EAAE;MACFlB,IAAI;MACJmB,KAAK;MACLC,QAAQ;MACRC;IACJ,CAAC;IAEDL,KAAK,CAACO,IAAI,CAACD,IAAI,CAAC;EACpB;EAEA,OAAON,KAAK;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}