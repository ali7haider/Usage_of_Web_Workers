{"ast":null,"code":"export async function fetchUsers() {\n  try {\n    // Initialize an array to store all users\n    let allUsers = [];\n\n    // Define the number of users to fetch\n    const totalUsers = 100; // For example, fetch 100 users\n\n    // Calculate the number of requests needed based on the limit (10 users per request)\n    const numRequests = Math.ceil(totalUsers / 10);\n\n    // Loop through each request and fetch users\n    for (let i = 0; i < numRequests; i++) {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/users?_start=${i * 10}&_limit=10`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch users');\n      }\n      const users = await response.json();\n\n      // Concatenate users to the array\n      allUsers = allUsers.concat(users);\n    }\n\n    // Map user objects to the required format\n    return allUsers.map((user, index) => ({\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      // Assuming 'joinedOn' and 'commentCount' are not provided by the API\n      joinedOn: new Date(),\n      // Placeholder for 'joinedOn' field\n      commentCount: Math.floor(Math.random() * 101) // Placeholder for 'commentCount' field\n    }));\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    return []; // Return an empty array or handle the error accordingly\n  }\n}","map":{"version":3,"names":["fetchUsers","allUsers","totalUsers","numRequests","Math","ceil","i","response","fetch","ok","Error","users","json","concat","map","user","index","id","name","email","joinedOn","Date","commentCount","floor","random","error","console"],"sources":["D:/Study/Semester 6/EAD/Usage of Web Workers in Modern Web Applications/my-react-app/src/services/fetchUser.js"],"sourcesContent":["export async function fetchUsers() {\r\n    try {\r\n        // Initialize an array to store all users\r\n        let allUsers = [];\r\n\r\n        // Define the number of users to fetch\r\n        const totalUsers = 100; // For example, fetch 100 users\r\n\r\n        // Calculate the number of requests needed based on the limit (10 users per request)\r\n        const numRequests = Math.ceil(totalUsers / 10);\r\n\r\n        // Loop through each request and fetch users\r\n        for (let i = 0; i < numRequests; i++) {\r\n            const response = await fetch(`https://jsonplaceholder.typicode.com/users?_start=${i * 10}&_limit=10`);\r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch users');\r\n            }\r\n            const users = await response.json();\r\n\r\n            // Concatenate users to the array\r\n            allUsers = allUsers.concat(users);\r\n        }\r\n\r\n        // Map user objects to the required format\r\n        return allUsers.map((user, index) => ({\r\n            id: user.id,\r\n            name: user.name,\r\n            email: user.email,\r\n            // Assuming 'joinedOn' and 'commentCount' are not provided by the API\r\n            joinedOn: new Date(), // Placeholder for 'joinedOn' field\r\n            commentCount: Math.floor(Math.random() * 101) // Placeholder for 'commentCount' field\r\n        }));\r\n    } catch (error) {\r\n        console.error('Error fetching users:', error);\r\n        return []; // Return an empty array or handle the error accordingly\r\n    }\r\n}\r\n"],"mappings":"AAAA,OAAO,eAAeA,UAAUA,CAAA,EAAG;EAC/B,IAAI;IACA;IACA,IAAIC,QAAQ,GAAG,EAAE;;IAEjB;IACA,MAAMC,UAAU,GAAG,GAAG,CAAC,CAAC;;IAExB;IACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,IAAI,CAACH,UAAU,GAAG,EAAE,CAAC;;IAE9C;IACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,EAAEG,CAAC,EAAE,EAAE;MAClC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,qDAAoDF,CAAC,GAAG,EAAG,YAAW,CAAC;MACrG,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC5C;MACA,MAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;;MAEnC;MACAX,QAAQ,GAAGA,QAAQ,CAACY,MAAM,CAACF,KAAK,CAAC;IACrC;;IAEA;IACA,OAAOV,QAAQ,CAACa,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,MAAM;MAClCC,EAAE,EAAEF,IAAI,CAACE,EAAE;MACXC,IAAI,EAAEH,IAAI,CAACG,IAAI;MACfC,KAAK,EAAEJ,IAAI,CAACI,KAAK;MACjB;MACAC,QAAQ,EAAE,IAAIC,IAAI,CAAC,CAAC;MAAE;MACtBC,YAAY,EAAElB,IAAI,CAACmB,KAAK,CAACnB,IAAI,CAACoB,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,EAAE,CAAC,CAAC;EACf;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}